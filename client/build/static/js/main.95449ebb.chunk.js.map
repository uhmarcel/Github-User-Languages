{"version":3,"sources":["Components/UserInput.js","Components/Loading.js","Components/UserStats.js","Components/Application.js","serviceWorker.js","index.js"],"names":["UserInput","state","profile","handleChange","e","target","value","_this","setState","handleSubmit","onSubmit","props","react_default","a","createElement","Fade","className","Container","Input","placeholder","onChange","this","Button","color","onClick","Component","Loading","Spinner","UserStats","scenes","INPUT","LOADING","STATS","Application","scene","_callee","regenerator_default","wrap","_context","prev","next","loadUserAPI","stop","_callee2","URL","userData","rawLang","langData","_context2","fetch","sent","json","Promise","all","map","repo","languages_url","console","log","raw","Components_UserInput","Components_Loading","Components_UserStats","Card","getComponent","Boolean","window","location","hostname","match","ReactDOM","render","Components_Application","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95449ebb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, Container, Button, Fade } from 'reactstrap';\r\n\r\n\r\nclass UserInput extends Component {\r\n\r\n    state = {\r\n        profile: null\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const profile = e.target.value;\r\n        this.setState({profile});\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const {onSubmit} = this.props;\r\n        const {profile} = this.state;\r\n        if (onSubmit) {\r\n            onSubmit(profile);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fade className='h-100 d-flex align-items-center'>\r\n                <Container>\r\n                    <h4 className='text-center'>Enter github profile</h4>\r\n                    <div className='text-center mt-4'>\r\n                        <Input \r\n                            className='mb-3 text-center'\r\n                            placeholder='Username' \r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <Button color='primary' onClick={this.handleSubmit}>\r\n                            Submit\r\n                        </Button>\r\n                    </div>\r\n                </Container>\r\n            </Fade>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default UserInput;","import React, { Component } from 'react';\r\nimport { Spinner, Fade } from 'reactstrap';\r\n\r\nclass Loading extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Fade className='h-100 d-flex align-items-center m-auto'>\r\n                <div className='text-center'>\r\n                    <h4>Loading...</h4>\r\n                    <Spinner color=\"primary\" className='mt-2'/> \r\n                </div>\r\n            </Fade>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Loading;","import React, { Component } from 'react';\r\n\r\nclass UserStats extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                test\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default UserStats;","import React, { Component } from 'react';\r\nimport { Container, Card } from 'reactstrap';\r\nimport UserInput from './UserInput';\r\nimport Loading from './Loading';\r\nimport UserStats from './UserStats';\r\n\r\n\r\nconst scenes = {\r\n    INPUT: 0,\r\n    LOADING: 1,\r\n    STATS: 2\r\n}\r\n\r\nclass Application extends Component {\r\n\r\n    state = {\r\n        scene: scenes.INPUT\r\n    }\r\n\r\n    handleSubmit = async (profile) => {\r\n        this.setState({scene: scenes.LOADING});\r\n        this.loadUserAPI(profile);\r\n    }\r\n\r\n    loadUserAPI = async (profile) => {\r\n        const URL = 'https://api.github.com/users/' + profile + '/repos';        \r\n        const userData = await ( await fetch(URL) ).json();   \r\n        const rawLang = await Promise.all(userData.map(repo => fetch(repo.languages_url)));\r\n        console.log(rawLang);\r\n        const langData = await Promise.all(rawLang.map(raw => raw.json()));\r\n\r\n        console.log(langData);\r\n    }\r\n\r\n    loadRepoLanguage\r\n\r\n    getComponent() {\r\n        const {scene} = this.state;\r\n        switch (scene) {\r\n            case scenes.INPUT: \r\n                return (<UserInput onSubmit={this.handleSubmit}/>);\r\n            case scenes.LOADING: \r\n                return (<Loading/>);\r\n            case scenes.STATS: \r\n                return (<UserStats/>);\r\n            default: \r\n                return (<p>error</p>);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Container className='appContainer'>\r\n                <Card className='h-100'>\r\n                    { this.getComponent() }\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Application;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './Components/Application';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Application/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}